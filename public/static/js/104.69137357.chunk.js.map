{"version":3,"file":"static/js/104.69137357.chunk.js","mappings":"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","sources":["pages/soal3.tsx"],"sourcesContent":["import { Container, Grid, Card, CardContent, CardActions, TextField, Button, Snackbar, Alert } from \"@mui/material\"\r\nimport { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';\r\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\r\nimport dayjs, { Dayjs } from \"dayjs\"\r\nimport { useState, FormEvent } from \"react\"\r\ninterface Data {\r\n    no_pesanan: string,\r\n    tanggal: Dayjs | null,\r\n    nm_supplier: string,\r\n    nm_produk: string,\r\n    total: number | string\r\n}\r\ninterface DataError {\r\n    no_pesanan?: string,\r\n    tanggal?: string,\r\n    nm_supplier?: string,\r\n    nm_produk?: string,\r\n    total?: string\r\n}\r\n\r\nconst Soal3 = () => {\r\n    const [data, setData] = useState<Data>({\r\n        no_pesanan: \"\",\r\n        tanggal: dayjs(new Date()),\r\n        nm_supplier: \"\", nm_produk: \"\",\r\n        total: \"\"\r\n    })\r\n    const [error, setError] = useState<DataError | undefined>()\r\n    const [isLoading, setLoading] = useState<boolean>(false)\r\n    const [isError, setIsError] = useState<boolean>(false)\r\n    const [isSuccess, setIsSuccess] = useState<boolean>(false)\r\n    const onFormSubmit = async (e: FormEvent) => {\r\n        e.preventDefault()\r\n        if (isLoading === true) return\r\n        const tmpData = {\r\n            ...data,\r\n            tanggal: (data.tanggal ?? dayjs(new Date())).format('YYYY-MM-DD'),\r\n            total: typeof data.total === 'number' ? data.total : parseFloat(data.total)\r\n        }\r\n        setError(undefined)\r\n        setIsError(false)\r\n        setLoading(true)\r\n        try {\r\n            const res = await fetch(\r\n                ((window as any)?.REACT_APP_API_URL ?? \"\") + \"/api/soal3\",\r\n                {\r\n                    method: \"post\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(tmpData)\r\n                }\r\n            )\r\n            setLoading(false)\r\n            if (res.status === 201) setIsSuccess(true)\r\n            else if (res.status === 400) setError((await res.json())?.data)\r\n            else setIsError(true)\r\n        } catch (err) {\r\n            console.log(err)\r\n            setIsError(true)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <Container>\r\n            <Grid container mt={2} mx={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <form onSubmit={onFormSubmit}>\r\n                        <Card>\r\n                            <CardContent>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        label=\"No. Pesanan\"\r\n                                        value={data.no_pesanan}\r\n                                        onChange={e => setData(d => ({ ...d, no_pesanan: e.target.value }))}\r\n                                        error={typeof error?.no_pesanan === 'string' && error.no_pesanan.length > 0}\r\n                                        helperText={typeof error?.no_pesanan === 'string' && error.no_pesanan.length > 0 ? error.no_pesanan : \"\"}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                        <DatePicker\r\n                                            value={data.tanggal}\r\n                                            onChange={(tanggal) => setData(d => ({ ...d, tanggal }))}\r\n                                            slotProps={{\r\n                                                textField: {\r\n                                                    label: \"Tanggal\",\r\n                                                    margin: \"dense\",\r\n                                                    fullWidth: true,\r\n                                                    error: typeof error?.tanggal === 'string' && error.tanggal.length > 0,\r\n                                                    helperText: typeof error?.tanggal === 'string' && error.tanggal.length > 0 ? error.tanggal : \"\"\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        label=\"Nama Supplier\"\r\n                                        value={data.nm_supplier}\r\n                                        onChange={e => setData(d => ({ ...d, nm_supplier: e.target.value }))}\r\n                                        error={typeof error?.nm_supplier === 'string' && error.nm_supplier.length > 0}\r\n                                        helperText={typeof error?.nm_supplier === 'string' && error.nm_supplier.length > 0 ? error.nm_supplier : \"\"}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextField\r\n                                        label=\"Nama Produk\"\r\n                                        value={data.nm_produk}\r\n                                        onChange={e => setData(d => ({ ...d, nm_produk: e.target.value }))}\r\n                                        error={typeof error?.nm_produk === 'string' && error.nm_produk.length > 0}\r\n                                        helperText={typeof error?.nm_produk === 'string' && error.nm_produk.length > 0 ? error.nm_produk : \"\"}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Total\"\r\n                                        value={data.total}\r\n                                        onChange={e => setData(d => {\r\n                                            if (e.target.value.length === 0)\r\n                                                return { ...d, total: \"\" }\r\n                                            if (e.target.value.length === 1 && e.target.value === \"-\")\r\n                                                return { ...d, total: e.target.value }\r\n                                            if (/^[-][0]+$/.test(e.target.value))\r\n                                                return { ...d, total: \"-0\" }\r\n                                            if (/^[-]?[0-9]+[.][0]+$/.test(e.target.value))\r\n                                                return { ...d, total: e.target.value }\r\n                                            if (/^[-]?[0-9]+([.][0-9]+)?$/.test(e.target.value))\r\n                                                return { ...d, total: parseFloat(e.target.value) }\r\n                                            if (\r\n                                                e.target.value[e.target.value.length - 1] === \".\" &&\r\n                                                e.target.value.indexOf(\".\") === (e.target.value.length - 1)\r\n                                            ) return { ...d, total: e.target.value }\r\n                                            return { ...d }\r\n                                        })}\r\n                                        error={typeof error?.total === 'string' && error.total.length > 0}\r\n                                        helperText={typeof error?.total === 'string' && error.total.length > 0 ? error.total : \"\"}\r\n                                        margin=\"dense\"\r\n                                        fullWidth\r\n                                    />\r\n                                </Grid>\r\n                            </CardContent>\r\n                            <CardActions sx={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                                <Button variant=\"contained\" type=\"submit\">Simpan</Button>\r\n                            </CardActions>\r\n                        </Card>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n        <Snackbar open={isSuccess} autoHideDuration={5000} onClose={() => setIsSuccess(false)}>\r\n            <Alert onClose={() => setIsSuccess(false)} severity=\"success\" sx={{ width: '100%' }}>\r\n                Berhasil Tersimpan!\r\n            </Alert>\r\n        </Snackbar>\r\n        <Snackbar open={isError} autoHideDuration={5000} onClose={() => setIsError(false)}>\r\n            <Alert onClose={() => setIsError(false)} severity=\"error\" sx={{ width: '100%' }}>\r\n                Gagal Tersimpan!\r\n            </Alert>\r\n        </Snackbar>\r\n    </>)\r\n}\r\nexport default Soal3"],"names":["_useState","useState","no_pesanan","tanggal","dayjs","Date","nm_supplier","nm_produk","total","_useState2","_slicedToArray","data","setData","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setLoading","_useState7","_useState8","isError","setIsError","_useState9","_useState10","isSuccess","setIsSuccess","onFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","_data$tanggal","tmpData","_REACT_APP_API_URL","_window","_yield$res$json","res","wrap","_context","prev","next","preventDefault","abrupt","_objectSpread","format","parseFloat","undefined","fetch","window","REACT_APP_API_URL","method","headers","body","JSON","stringify","sent","status","t0","json","t2","t1","t3","t4","t5","console","log","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","Container","Grid","container","mt","mx","item","xs","sm","onSubmit","Card","CardContent","TextField","label","value","onChange","d","target","length","helperText","margin","fullWidth","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","slotProps","textField","type","test","indexOf","CardActions","sx","display","justifyContent","Button","variant","Snackbar","open","autoHideDuration","onClose","Alert","severity","width"],"sourceRoot":""}