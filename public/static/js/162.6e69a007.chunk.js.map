{"version":3,"file":"static/js/162.6e69a007.chunk.js","mappings":"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","sources":["pages/soal1.tsx"],"sourcesContent":["import { Theme, Container, Grid, Box, Skeleton, Pagination, Typography, Button, TableContainer, Table, TableHead, TableBody, TableRow, TableCell } from \"@mui/material\"\r\nimport { lazy, useState, Suspense } from \"react\"\r\n\r\nconst Soal2 = lazy(() => import('../components/Soal2'))\r\n\r\ninterface Product {\r\n    id: string | number,\r\n    title: string,\r\n    description: string,\r\n    price: number,\r\n    discountPercentage: number,\r\n    rating: number,\r\n    stock: number,\r\n    brand: string,\r\n    category: string,\r\n    thumbnail: string,\r\n    images: string[]\r\n}\r\n\r\ninterface Data {\r\n    products: Product[],\r\n    total: number,\r\n    skip: number,\r\n    limit: number\r\n}\r\n\r\nconst Soal1 = () => {\r\n    const [isLoading, setLoading] = useState<boolean>(false)\r\n    const [isError, setError] = useState<boolean>(false)\r\n    const [data, setData] = useState<Data | undefined>()\r\n    const [page, setPage] = useState<number>(1)\r\n    const [limit, setLimit] = useState<number>(30)\r\n    const [idProductModal, setIDProductModal] = useState<string | number | undefined>()\r\n\r\n    const onViewClick = async (e?: any, p: number = page) => {\r\n        if (isLoading === true) return\r\n        setError(false)\r\n        setLoading(true)\r\n        try {\r\n            const total = data?.total ?? 0\r\n            const tmpSkip = Math.min((p - 1) * limit, total)\r\n            const res = await fetch(\r\n                ((window as any)?.REACT_APP_API_URL ?? \"\") + \"/api/soal1?limit=\" + encodeURIComponent(limit) + \"&skip=\" + encodeURIComponent(tmpSkip)\r\n            )\r\n            setLoading(false)\r\n            if (res.status === 200) {\r\n                const tmpData = (await res.json()) as Data\r\n                setData(tmpData)\r\n                setPage(Math.max(1, Math.floor(tmpData.skip / limit) + 1))\r\n            } else setError(true)\r\n        } catch (error) {\r\n            console.log(error)\r\n            setLoading(false)\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const onPageChange = async (e: any, p: number) => {\r\n        if (isLoading === true) return\r\n        setPage(Math.max(1, p))\r\n        await onViewClick(e, Math.max(1, p))\r\n    }\r\n\r\n    return (<>\r\n        <Container>\r\n            <Grid container mt={2} mx={2} spacing={1}>\r\n                <Grid item xs={12} display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography variant=\"h5\">Product List</Typography>\r\n                    <Button variant=\"contained\" onClick={onViewClick} color={isError === true ? 'error' : 'primary'}>Show Products</Button>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>Image</TableCell>\r\n                                    <TableCell>Title</TableCell>\r\n                                    <TableCell>Category</TableCell>\r\n                                    <TableCell>Brand</TableCell>\r\n                                    <TableCell>Stock</TableCell>\r\n                                    <TableCell>Price</TableCell>\r\n                                    <TableCell>Action</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {isLoading === true ?\r\n                                    [...Array(Math.max(1, (data?.products ?? []).length))].map((d, i) =>\r\n                                    (<TableRow key={i}>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                        <TableCell><Skeleton /></TableCell>\r\n                                    </TableRow>)\r\n                                    ) : (data?.products ?? []).map(d => (<TableRow key={d.id}>\r\n                                        <TableCell>\r\n                                            <Box maxWidth={(t: Theme) => `${(4 / 12) * t.breakpoints.values.sm}px`}>\r\n                                                <img src={d.thumbnail} alt={d.title} style={{ width: \"100%\" }} />\r\n                                            </Box>\r\n                                        </TableCell>\r\n                                        <TableCell>{d.title}</TableCell>\r\n                                        <TableCell>{d.category}</TableCell>\r\n                                        <TableCell>{d.brand}</TableCell>\r\n                                        <TableCell>{d.stock}</TableCell>\r\n                                        <TableCell>${d.price.toLocaleString('en-US')}</TableCell>\r\n                                        <TableCell><Button onClick={() => setIDProductModal(d.id)} variant=\"contained\">View</Button></TableCell>\r\n                                    </TableRow>))\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n                <Grid item xs={12} display=\"flex\" justifyContent=\"space-between\">\r\n                    <Typography>SHOW: {Array.isArray(data?.products) ? data?.products.length : 0} ITEMS</Typography>\r\n                    <Pagination\r\n                        count={\r\n                            Math.max(1,\r\n                                Math.ceil(\r\n                                    (data?.total ?? 0) /\r\n                                    Math.max(1, limit)\r\n                                )\r\n                            )\r\n                        }\r\n                        page={Math.max(1, page)}\r\n                        onChange={onPageChange}\r\n                        showFirstButton\r\n                        showLastButton\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n        <Suspense>\r\n            <Soal2\r\n                id={idProductModal}\r\n                onClose={() => setIDProductModal(undefined)}\r\n            />\r\n        </Suspense>\r\n    </>)\r\n}\r\n\r\nexport default Soal1"],"names":["Soal2","lazy","_data$products","_data$products2","_data$total2","_useState","useState","_useState2","_slicedToArray","isLoading","setLoading","_useState3","_useState4","isError","setError","_useState5","_useState6","data","setData","_useState7","_useState8","page","setPage","_useState9","_useState10","limit","_useState11","_useState12","idProductModal","setIDProductModal","onViewClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","p","_data$total","_REACT_APP_API_URL","_window","total","tmpSkip","res","tmpData","_args","arguments","wrap","_context","prev","next","length","undefined","abrupt","Math","min","fetch","window","REACT_APP_API_URL","encodeURIComponent","sent","status","json","max","floor","skip","t0","console","log","stop","_x","apply","onPageChange","_ref2","_callee2","_context2","_x2","_x3","_jsxs","_Fragment","children","_jsx","Container","Grid","container","mt","mx","spacing","item","xs","display","justifyContent","Typography","variant","Button","onClick","color","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","_toConsumableArray","Array","products","map","d","i","Skeleton","Box","maxWidth","t","concat","breakpoints","values","sm","src","thumbnail","alt","title","style","width","category","brand","stock","price","toLocaleString","id","isArray","Pagination","count","ceil","onChange","showFirstButton","showLastButton","Suspense","onClose"],"sourceRoot":""}